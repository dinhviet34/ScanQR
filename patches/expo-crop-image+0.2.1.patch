diff --git a/node_modules/expo-crop-image/dist/ControlBar.js b/node_modules/expo-crop-image/dist/ControlBar.js
index 9fed087..a330d06 100644
--- a/node_modules/expo-crop-image/dist/ControlBar.js
+++ b/node_modules/expo-crop-image/dist/ControlBar.js
@@ -1,39 +1,65 @@
-import React, { useContext } from 'react';
-import { StyleSheet, View } from 'react-native';
+import React, { useContext, useState } from 'react';
+import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
 import { useRecoilState, useRecoilValue } from 'recoil';
 import { IconButton } from './components/IconButton';
 import { EditorContext } from './context/editor';
 import { usePerformCrop } from './customHooks/usePerformCrop';
-import { editorOptionsState, isEditState } from './Store';
+import { editorOptionsState, isEditState, AspectRatioState } from './Store';
+import Slider from '@react-native-community/slider'
 function ControlBar() {
     var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
     const [isEdit, setIsEdit] = useRecoilState(isEditState);
     const { controlBar } = useRecoilValue(editorOptionsState);
     const { onBackPress, onSave } = useContext(EditorContext);
+    const [myaspect, setmyaspect] = useRecoilState(AspectRatioState)
     const performCrop = usePerformCrop();
     const onEditDone = async () => {
         await performCrop();
         setIsEdit(true);
     };
-    return (<View style={[
-            styles.container,
-            {
-                backgroundColor: controlBar === null || controlBar === void 0 ? void 0 : controlBar.backgroundColor,
-                height: controlBar === null || controlBar === void 0 ? void 0 : controlBar.height,
-            },
-        ]}>
-      <IconButton iconID={!isEdit
-            ? (_a = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cancelButton) === null || _a === void 0 ? void 0 : _a.iconName
-            : (_b = controlBar === null || controlBar === void 0 ? void 0 : controlBar.backButton) === null || _b === void 0 ? void 0 : _b.iconName} color={!isEdit
-            ? (_c = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cancelButton) === null || _c === void 0 ? void 0 : _c.color
-            : (_d = controlBar === null || controlBar === void 0 ? void 0 : controlBar.backButton) === null || _d === void 0 ? void 0 : _d.color} text={!isEdit
-            ? (_e = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cancelButton) === null || _e === void 0 ? void 0 : _e.text
-            : (_f = controlBar === null || controlBar === void 0 ? void 0 : controlBar.backButton) === null || _f === void 0 ? void 0 : _f.text} onPress={() => {
-            onBackPress();
-            setIsEdit(false);
-        }}/>
-      {!isEdit ? (<IconButton iconID={(_g = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cropButton) === null || _g === void 0 ? void 0 : _g.iconName} text={(_h = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cropButton) === null || _h === void 0 ? void 0 : _h.text} color={(_j = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cropButton) === null || _j === void 0 ? void 0 : _j.color} onPress={onEditDone}/>) : (<IconButton iconID={(_k = controlBar === null || controlBar === void 0 ? void 0 : controlBar.saveButton) === null || _k === void 0 ? void 0 : _k.iconName} text={(_l = controlBar === null || controlBar === void 0 ? void 0 : controlBar.saveButton) === null || _l === void 0 ? void 0 : _l.text} color={(_m = controlBar === null || controlBar === void 0 ? void 0 : controlBar.saveButton) === null || _m === void 0 ? void 0 : _m.color} onPress={onSave}/>)}
-    </View>);
+
+    return (
+        <View>
+            <View style={[
+                styles.container,
+                {
+                    backgroundColor: controlBar === null || controlBar === void 0 ? void 0 : controlBar.backgroundColor,
+                    height: controlBar === null || controlBar === void 0 ? void 0 : controlBar.height,
+                },
+            ]}>
+                <IconButton iconID={!isEdit
+                    ? (_a = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cancelButton) === null || _a === void 0 ? void 0 : _a.iconName
+                    : (_b = controlBar === null || controlBar === void 0 ? void 0 : controlBar.backButton) === null || _b === void 0 ? void 0 : _b.iconName} color={!isEdit
+                        ? (_c = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cancelButton) === null || _c === void 0 ? void 0 : _c.color
+                        : (_d = controlBar === null || controlBar === void 0 ? void 0 : controlBar.backButton) === null || _d === void 0 ? void 0 : _d.color} text={!isEdit
+                            ? (_e = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cancelButton) === null || _e === void 0 ? void 0 : _e.text
+                            : (_f = controlBar === null || controlBar === void 0 ? void 0 : controlBar.backButton) === null || _f === void 0 ? void 0 : _f.text} onPress={() => {
+                                onBackPress();
+                                setIsEdit(false);
+                            }} />
+                {!isEdit ? (<IconButton iconID={(_g = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cropButton) === null || _g === void 0 ? void 0 : _g.iconName} text={(_h = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cropButton) === null || _h === void 0 ? void 0 : _h.text} color={(_j = controlBar === null || controlBar === void 0 ? void 0 : controlBar.cropButton) === null || _j === void 0 ? void 0 : _j.color} onPress={onEditDone} />) : (<IconButton iconID={(_k = controlBar === null || controlBar === void 0 ? void 0 : controlBar.saveButton) === null || _k === void 0 ? void 0 : _k.iconName} text={(_l = controlBar === null || controlBar === void 0 ? void 0 : controlBar.saveButton) === null || _l === void 0 ? void 0 : _l.text} color={(_m = controlBar === null || controlBar === void 0 ? void 0 : controlBar.saveButton) === null || _m === void 0 ? void 0 : _m.color} onPress={onSave} />)}
+              
+            </View>
+            <View>
+            <Slider
+                    maximumValue={4}
+                    minimumValue={0.6}
+                    minimumTrackTintColor="#009FBD"
+                    maximumTrackTintColor="#000000"
+                    step={0.1}
+                    value={myaspect}
+                    onValueChange={(sliderValue) => setmyaspect(sliderValue)}
+                />
+                <Text style={{color:'#fff'}}>
+                    Tỉ lệ khung cắt: {myaspect}
+                </Text>
+            </View>
+
+
+
+        </View>
+
+    );
 }
 export { ControlBar };
 const styles = StyleSheet.create({
diff --git a/node_modules/expo-crop-image/dist/ImageCropOverlay.js b/node_modules/expo-crop-image/dist/ImageCropOverlay.js
index deecee1..656debc 100644
--- a/node_modules/expo-crop-image/dist/ImageCropOverlay.js
+++ b/node_modules/expo-crop-image/dist/ImageCropOverlay.js
@@ -1,3 +1,4 @@
+import * as React from "react";
 import { useContext, useEffect, useRef, useState } from 'react';
 import { Animated, StyleSheet, View } from 'react-native';
 import { GestureHandlerRootView, PanGestureHandler, State, } from 'react-native-gesture-handler';
@@ -7,254 +8,371 @@ import { accumulatedPanState, cropSizeState, editorOptionsState, imageBoundsStat
 const horizontalSections = ['top', 'middle', 'bottom'];
 const verticalSections = ['left', 'middle', 'right'];
 const ImageCropOverlay = () => {
-    const [selectedFrameSection, setSelectedFrameSection] = useState('');
+    // Record which section of the fram window has been pressed
+    // this determines whether it is a translation or scaling gesture
+    const [selectedFrameSection, setSelectedFrameSection] = React.useState(""); // Shared state and bits passed through recoil to avoid prop drilling
+  
     const [cropSize, setCropSize] = useRecoilState(cropSizeState);
     const [imageBounds] = useRecoilState(imageBoundsState);
-    const [accumulatedPan, setAccumulatedPan] = useRecoilState(accumulatedPanState);
-    const { gridOverlayColor, coverMarker, overlayCropColor } = useRecoilValue(editorOptionsState);
-    const { fixedAspectRatio, minimumCropDimensions } = useContext(EditorContext);
-    const [animatedCropSize] = useState({
-        width: new Animated.Value(cropSize.width),
-        height: new Animated.Value(cropSize.height),
-    });
-    const panX = useRef(new Animated.Value(imageBounds.x));
-    const panY = useRef(new Animated.Value(imageBounds.y));
-    useEffect(() => {
-        checkCropBounds({
-            translationX: 0,
-            translationY: 0,
-        });
-        animatedCropSize.height.setValue(cropSize.height);
-        animatedCropSize.width.setValue(cropSize.width);
+    const [accumulatedPan, setAccumluatedPan] = useRecoilState(accumulatedPanState); // Editor context
+  
+    const {
+      fixedAspectRatio,
+      lockAspectRatio,
+      minimumCropDimensions
+    } = useContext(EditorContext);
+    const [animatedCropSize] = React.useState({
+      width: new Animated.Value(cropSize.width),
+      height: new Animated.Value(cropSize.height)
+    }); // pan X and Y values to track the current delta of the pan
+    // in both directions - this should be zeroed out on release
+    // and the delta added onto the accumulatedPan state
+  
+    const panX = React.useRef(new Animated.Value(imageBounds.x));
+    const panY = React.useRef(new Animated.Value(imageBounds.y));
+    React.useEffect(() => {
+      // Move the pan to the origin and check the bounds so it clicks to
+      // the corner of the image
+      checkCropBounds({
+        translationX: 0,
+        translationY: 0
+      }); // When the crop size updates make sure the animated value does too!
+  
+      animatedCropSize.height.setValue(cropSize.height);
+      animatedCropSize.width.setValue(cropSize.width);
     }, [cropSize]);
-    useEffect(() => {
-        const newSize = { width: 0, height: 0 };
-        const { width, height } = imageBounds;
-        const imageAspectRatio = width / height;
-        if (fixedAspectRatio < imageAspectRatio) {
-            newSize.height = height;
-            newSize.width = height * fixedAspectRatio;
+    React.useEffect(() => {
+      // Update the size of the crop window based on the new image bounds
+      let newSize = {
+        width: 0,
+        height: 0
+      };
+      const {
+        width,
+        height
+      } = imageBounds;
+      const imageAspectRatio = width / height; // Then check if the cropping aspect ratio is smaller
+  
+      if (fixedAspectRatio < imageAspectRatio) {
+        // If so calculate the size so its not greater than the image width
+        newSize.height = height;
+        newSize.width = height * fixedAspectRatio;
+      } else {
+        // else, calculate the size so its not greater than the image height
+        newSize.width = width;
+        newSize.height = width / fixedAspectRatio;
+      } // Set the size of the crop overlay
+  
+  
+      setCropSize(newSize);
+    }, [imageBounds]); // Function that sets which sections allow for translation when
+    // pressed
+  
+    const isMovingSection = () => {
+      return selectedFrameSection == "topmiddle" || selectedFrameSection == "middleleft" || selectedFrameSection == "middleright" || selectedFrameSection == "middlemiddle" || selectedFrameSection == "bottommiddle";
+    }; // Check what resizing / translation needs to be performed based on which section was pressed
+  
+  
+    const isLeft = selectedFrameSection.endsWith("left");
+    const isTop = selectedFrameSection.startsWith("top");
+  
+    const onOverlayMove = ({
+      nativeEvent
+    }) => {
+      if (selectedFrameSection !== "") {
+        // Check if the section pressed is one to translate the crop window or not
+        if (isMovingSection()) {
+          // If it is then use an animated event to directly pass the tranlation
+          // to the pan refs
+          Animated.event([{
+            translationX: panX.current,
+            translationY: panY.current
+          }], {
+            useNativeDriver: false
+          })(nativeEvent);
+        } else {
+          // Else its a scaling operation
+          const {
+            x,
+            y
+          } = getTargetCropFrameBounds(nativeEvent);
+  
+          if (isTop) {
+            panY.current.setValue(-y);
+          }
+  
+          if (isLeft) {
+            panX.current.setValue(-x);
+          } // Finally update the animated width to the values the crop
+          // window has been resized to
+  
+  
+          animatedCropSize.width.setValue(cropSize.width + x);
+          animatedCropSize.height.setValue(cropSize.height + y);
         }
-        else {
-            newSize.width = width;
-            newSize.height = width / fixedAspectRatio;
-        }
-        setCropSize(newSize);
-    }, [imageBounds]);
-    const isMovingSection = () => selectedFrameSection === 'topmiddle' ||
-        selectedFrameSection === 'middleleft' ||
-        selectedFrameSection === 'middleright' ||
-        selectedFrameSection === 'middlemiddle' ||
-        selectedFrameSection === 'bottommiddle';
-    const isLeft = selectedFrameSection.endsWith('left');
-    const isTop = selectedFrameSection.startsWith('top');
-    const onOverlayMove = ({ nativeEvent }) => {
-        if (selectedFrameSection !== '') {
-            if (isMovingSection()) {
-                Animated.event([
-                    {
-                        translationX: panX.current,
-                        translationY: panY.current,
-                    },
-                ], { useNativeDriver: false })(nativeEvent);
-            }
-            else {
-                const { x, y } = getTargetCropFrameBounds(nativeEvent);
-                if (isTop) {
-                    panY.current.setValue(-y);
-                }
-                if (isLeft) {
-                    panX.current.setValue(-x);
-                }
-                animatedCropSize.width.setValue(cropSize.width + x);
-                animatedCropSize.height.setValue(cropSize.height + y);
-            }
-        }
-        else {
-            const { x, y } = nativeEvent;
-            const { width: initialWidth, height: initialHeight } = cropSize;
-            let position = '';
-            if (y / initialHeight < 0.333) {
-                position = position + 'top';
-            }
-            else if (y / initialHeight < 0.667) {
-                position = position + 'middle';
-            }
-            else {
-                position = position + 'bottom';
-            }
-            if (x / initialWidth < 0.333) {
-                position = position + 'left';
-            }
-            else if (x / initialWidth < 0.667) {
-                position = position + 'middle';
-            }
-            else {
-                position = position + 'right';
-            }
-            setSelectedFrameSection(position);
+      } else {
+        // We need to set which section has been pressed
+        const {
+          x,
+          y
+        } = nativeEvent;
+        const {
+          width: initialWidth,
+          height: initialHeight
+        } = cropSize;
+        let position = ""; // Figure out where we pressed vertically
+  
+        if (y / initialHeight < 0.333) {
+          position = position + "top";
+        } else if (y / initialHeight < 0.667) {
+          position = position + "middle";
+        } else {
+          position = position + "bottom";
+        } // Figure out where we pressed horizontally
+  
+  
+        if (x / initialWidth < 0.333) {
+          position = position + "left";
+        } else if (x / initialWidth < 0.667) {
+          position = position + "middle";
+        } else {
+          position = position + "right";
         }
+  
+        setSelectedFrameSection(position);
+      }
     };
-    const getTargetCropFrameBounds = ({ translationX, translationY, }) => {
-        let x = 0;
-        let y = 0;
-        if (translationX && translationY) {
-            if (translationX < translationY) {
-                x = (isLeft ? -1 : 1) * translationX;
-                y = x / fixedAspectRatio;
-            }
-            else {
-                y = (isTop ? -1 : 1) * translationY;
-                x = y * fixedAspectRatio;
-            }
+  
+    const getTargetCropFrameBounds = ({
+      translationX,
+      translationY
+    }) => {
+      let x = 0;
+      let y = 0;
+  
+      if (translationX && translationY) {
+        if (translationX < translationY) {
+          x = (isLeft ? -1 : 1) * translationX;
+  
+          if (lockAspectRatio) {
+            y = x / fixedAspectRatio;
+          } else {
+            y = (isTop ? -1 : 1) * translationY;
+          }
+        } else {
+          y = (isTop ? -1 : 1) * translationY;
+  
+          if (lockAspectRatio) {
+            x = y * fixedAspectRatio;
+          } else {
+            x = (isLeft ? -1 : 1) * translationX;
+          }
         }
-        return { x, y };
+      }
+  
+      return {
+        x,
+        y
+      };
     };
-    const onOverlayRelease = (nativeEvent) => {
-        isMovingSection()
-            ? checkCropBounds(nativeEvent)
-            : checkResizeBounds(nativeEvent);
-        setSelectedFrameSection('');
+  
+    const onOverlayRelease = nativeEvent => {
+      // Check if the section pressed is one to translate the crop window or not
+      if (isMovingSection()) {
+        // Ensure the cropping overlay has not been moved outside of the allowed bounds
+        checkCropBounds(nativeEvent);
+      } else {
+        // Else its a scaling op - check that the resizing didnt take it out of bounds
+        checkResizeBounds(nativeEvent);
+      } // Disable the pan responder so the section tiles can register being pressed again
+  
+  
+      setSelectedFrameSection("");
     };
-    const onHandlerStateChange = ({ nativeEvent, }) => {
-        if (nativeEvent.state === State.END)
-            onOverlayRelease(nativeEvent);
+  
+    const onHandlerStateChange = ({
+      nativeEvent
+    }) => {
+      // Handle any state changes from the pan gesture handler
+      // only looking at when the touch ends atm
+      if (nativeEvent.state === State.END) {
+        onOverlayRelease(nativeEvent);
+      }
     };
-    const checkCropBounds = ({ translationX, translationY }) => {
-        let accDx = accumulatedPan.x + translationX;
-        if (accDx <= imageBounds.x) {
-            accDx = imageBounds.x;
-        }
-        else if (accDx + cropSize.width > imageBounds.width + imageBounds.x) {
-            accDx = imageBounds.x + imageBounds.width - cropSize.width;
-        }
-        let accDy = accumulatedPan.y + translationY;
-        if (accDy <= imageBounds.y) {
-            accDy = imageBounds.y;
-        }
-        else if (accDy + cropSize.height > imageBounds.height + imageBounds.y) {
-            accDy = imageBounds.y + imageBounds.height - cropSize.height;
-        }
-        panX.current.setValue(0);
-        panY.current.setValue(0);
-        setAccumulatedPan({ x: accDx, y: accDy });
+  
+    const checkCropBounds = ({
+      translationX,
+      translationY
+    }) => {
+      // Check if the pan in the x direction exceeds the bounds
+      let accDx = accumulatedPan.x + translationX; // Is the new x pos less than zero?
+  
+      if (accDx <= imageBounds.x) {
+        // Then set it to be zero and set the pan to zero too
+        accDx = imageBounds.x;
+      } // Is the new x pos plus crop width going to exceed the right hand bound
+      else if (accDx + cropSize.width > imageBounds.width + imageBounds.x) {
+        // Then set the x pos so the crop frame touches the right hand edge
+        let limitedXPos = imageBounds.x + imageBounds.width - cropSize.width;
+        accDx = limitedXPos;
+      } else {// It's somewhere in between - no formatting required
+      } // Check if the pan in the y direction exceeds the bounds
+  
+  
+      let accDy = accumulatedPan.y + translationY; // Is the new y pos less the top edge?
+  
+      if (accDy <= imageBounds.y) {
+        // Then set it to be zero and set the pan to zero too
+        accDy = imageBounds.y;
+      } // Is the new y pos plus crop height going to exceed the bottom bound
+      else if (accDy + cropSize.height > imageBounds.height + imageBounds.y) {
+        // Then set the y pos so the crop frame touches the bottom edge
+        let limitedYPos = imageBounds.y + imageBounds.height - cropSize.height;
+        accDy = limitedYPos;
+      } else {// It's somewhere in between - no formatting required
+      } // Record the accumulated pan and reset the pan refs to zero
+  
+  
+      panX.current.setValue(0);
+      panY.current.setValue(0);
+      setAccumluatedPan({
+        x: accDx,
+        y: accDy
+      });
     };
-    const checkResizeBounds = ({ translationX, translationY }) => {
-        let { width: maxWidth, height: maxHeight } = imageBounds;
-        const { width: minWidth, height: minHeight } = minimumCropDimensions;
-        const height = maxWidth / fixedAspectRatio;
-        if (maxHeight > height)
-            maxHeight = height;
-        const width = maxHeight * fixedAspectRatio;
-        if (maxWidth > width)
-            maxWidth = width;
-        const { x, y } = getTargetCropFrameBounds({ translationX, translationY });
-        const animatedWidth = cropSize.width + x;
-        const animatedHeight = cropSize.height + y;
-        let finalHeight = animatedHeight;
-        let finalWidth = animatedWidth;
-        if (animatedHeight > maxHeight) {
-            finalHeight = maxHeight;
-            finalWidth = finalHeight * fixedAspectRatio;
-        }
-        else if (animatedHeight < minHeight) {
-            finalHeight = minHeight;
-            finalWidth = finalHeight * fixedAspectRatio;
-        }
-        if (animatedWidth > maxWidth) {
-            finalWidth = maxWidth;
-            finalHeight = maxHeight;
-        }
-        else if (animatedWidth < minWidth) {
-            finalWidth = minWidth;
-            finalHeight = finalWidth / fixedAspectRatio;
-        }
-        setAccumulatedPan({
-            x: accumulatedPan.x + (isLeft ? -x : 0),
-            y: accumulatedPan.y + (isTop ? -y : 0),
-        });
-        panX.current.setValue(0);
-        panY.current.setValue(0);
-        setCropSize({
-            height: finalHeight,
-            width: finalWidth,
-        });
+  
+    const checkResizeBounds = ({
+      translationX,
+      translationY
+    }) => {
+      // Check we haven't gone out of bounds when resizing - allow it to be
+      // resized up to the appropriate bounds if so
+      const {
+        width: maxWidth,
+        height: maxHeight
+      } = imageBounds;
+      const {
+        width: minWidth,
+        height: minHeight
+      } = minimumCropDimensions;
+      const {
+        x,
+        y
+      } = getTargetCropFrameBounds({
+        translationX,
+        translationY
+      });
+      const animatedWidth = cropSize.width + x;
+      const animatedHeight = cropSize.height + y;
+      let finalHeight = animatedHeight;
+      let finalWidth = animatedWidth; // Ensure the width / height does not exceed the boundaries -
+      // resize to the max it can be if so
+  
+      if (animatedHeight > maxHeight) {
+        finalHeight = maxHeight;
+        if (lockAspectRatio) finalWidth = finalHeight * fixedAspectRatio;
+      } else if (animatedHeight < minHeight) {
+        finalHeight = minHeight;
+        if (lockAspectRatio) finalWidth = finalHeight * fixedAspectRatio;
+      }
+  
+      if (animatedWidth > maxWidth) {
+        finalWidth = maxWidth;
+        if (lockAspectRatio) finalHeight = finalWidth / fixedAspectRatio;
+      } else if (animatedWidth < minWidth) {
+        finalWidth = minWidth;
+        if (lockAspectRatio) finalHeight = finalWidth / fixedAspectRatio;
+      } // Update the accumulated pan with the delta from the pan refs
+  
+  
+      setAccumluatedPan({
+        x: accumulatedPan.x + (isLeft ? -x : 0),
+        y: accumulatedPan.y + (isTop ? -y : 0)
+      }); // Zero out the pan refs
+  
+      panX.current.setValue(0);
+      panY.current.setValue(0); // Update the crop size to the size after resizing
+  
+      setCropSize({
+        height: finalHeight,
+        width: finalWidth
+      });
     };
-    return (<View style={styles.container}>
-      <GestureHandlerRootView style={{ flex: 1 }}>
-        <PanGestureHandler onGestureEvent={onOverlayMove} onHandlerStateChange={(e) => onHandlerStateChange(e)}>
-          <Animated.View style={[
-            styles.overlay,
-            {
-                backgroundColor: overlayCropColor,
-                borderColor: gridOverlayColor,
-            },
-            animatedCropSize,
-            {
-                transform: [
-                    { translateX: Animated.add(panX.current, accumulatedPan.x) },
-                    { translateY: Animated.add(panY.current, accumulatedPan.y) },
-                ],
-            },
-        ]}>
-            {horizontalSections.map((horizontalSection) => {
-            return (<View style={styles.sectionRow} key={horizontalSection}>
-                  {verticalSections.map((verticalSection) => {
-                    const key = horizontalSection + verticalSection;
-                    return (<View style={[
-                            styles.defaultSection,
-                            { borderColor: gridOverlayColor },
-                        ]} key={key}>
-                        {key === 'topleft' ||
-                            key === 'topright' ||
-                            key === 'bottomleft' ||
-                            key === 'bottomright'
-                            ? (coverMarker === null || coverMarker === void 0 ? void 0 : coverMarker.show) && (<View style={[
-                                    styles.cornerMarker,
-                                    { borderColor: coverMarker === null || coverMarker === void 0 ? void 0 : coverMarker.color },
-                                    horizontalSection === 'top'
-                                        ? { top: -4, borderTopWidth: 7 }
-                                        : { bottom: -4, borderBottomWidth: 7 },
-                                    verticalSection === 'left'
-                                        ? { left: -4, borderLeftWidth: 7 }
-                                        : { right: -4, borderRightWidth: 7 },
-                                ]}/>)
-                            : null}
-                      </View>);
-                })}
-                </View>);
-        })}
-          </Animated.View>
-        </PanGestureHandler>
-      </GestureHandlerRootView>
-    </View>);
-};
-export { ImageCropOverlay };
-const styles = StyleSheet.create({
+  
+    return /*#__PURE__*/React.createElement(GestureHandlerRootView, {
+      style: styles.container
+    }, /*#__PURE__*/React.createElement(PanGestureHandler, {
+      onGestureEvent: onOverlayMove,
+      onHandlerStateChange: e => onHandlerStateChange(e)
+    }, /*#__PURE__*/React.createElement(Animated.View, {
+      style: [styles.overlay, animatedCropSize, {
+        transform: [{
+          translateX: Animated.add(panX.current, accumulatedPan.x)
+        }, {
+          translateY: Animated.add(panY.current, accumulatedPan.y)
+        }]
+      }]
+    }, // For reendering out each section of the crop overlay frame
+    horizontalSections.map(hsection => {
+      return /*#__PURE__*/React.createElement(View, {
+        style: styles.sectionRow,
+        key: hsection
+      }, verticalSections.map(vsection => {
+        const key = hsection + vsection;
+        return /*#__PURE__*/React.createElement(View, {
+          style: [styles.defaultSection],
+          key: key
+        }, // Add the corner markers to the topleft,
+        // topright, bottomleft and bottomright corners to indicate resizing
+        key == "topleft" || key == "topright" || key == "bottomleft" || key == "bottomright" ? /*#__PURE__*/React.createElement(View, {
+          style: [styles.cornerMarker, hsection == "top" ? {
+            top: -4,
+            borderTopWidth: 7
+          } : {
+            bottom: -4,
+            borderBottomWidth: 7
+          }, vsection == "left" ? {
+            left: -4,
+            borderLeftWidth: 7
+          } : {
+            right: -4,
+            borderRightWidth: 7
+          }]
+        }) : null);
+      }));
+    }))));
+  };
+  
+  export { ImageCropOverlay };
+  const styles = StyleSheet.create({
     container: {
-        height: '100%',
-        width: '100%',
-        position: 'absolute',
+      height: "100%",
+      width: "100%",
+      position: "absolute"
     },
     overlay: {
-        height: 40,
-        width: 40,
-        borderWidth: 1,
+      height: 40,
+      width: 40,
+      backgroundColor: "#33333355",
+      borderColor: "#ffffff88",
+      borderWidth: 1
     },
     sectionRow: {
-        flexDirection: 'row',
-        flex: 1,
+      flexDirection: "row",
+      flex: 1
     },
     defaultSection: {
-        flex: 1,
-        borderWidth: 0.5,
-        justifyContent: 'center',
-        alignItems: 'center',
+      flex: 1,
+      borderWidth: 0.5,
+      borderColor: "#ffffff88",
+      justifyContent: "center",
+      alignItems: "center"
     },
     cornerMarker: {
-        position: 'absolute',
-        height: 30,
-        width: 30,
-    },
-});
-//# sourceMappingURL=ImageCropOverlay.js.map
\ No newline at end of file
+      position: "absolute",
+      borderColor: "#ffffff",
+      height: 30,
+      width: 30
+    }
+  });
+  //# sourceMappingURL=ImageCropOverlay.js.map
\ No newline at end of file
diff --git a/node_modules/expo-crop-image/dist/Store.js b/node_modules/expo-crop-image/dist/Store.js
index 7df832a..8fa0683 100644
--- a/node_modules/expo-crop-image/dist/Store.js
+++ b/node_modules/expo-crop-image/dist/Store.js
@@ -20,6 +20,7 @@ export const imageBoundsState = atom({
         height: 0,
     },
 });
+
 export const readyState = atom({
     key: 'readyState',
     default: false,
@@ -87,4 +88,8 @@ export const editorOptionsState = atom({
         },
     },
 });
+export const AspectRatioState = atom({
+    key: 'AspectRatio',
+    default:3/2
+});
 //# sourceMappingURL=Store.js.map
\ No newline at end of file
diff --git a/node_modules/expo-crop-image/dist/index.js b/node_modules/expo-crop-image/dist/index.js
index 4d5622d..1b89f32 100644
--- a/node_modules/expo-crop-image/dist/index.js
+++ b/node_modules/expo-crop-image/dist/index.js
@@ -6,15 +6,18 @@ import { EditorContext } from './context/editor';
 import { ControlBar } from './ControlBar';
 import { EditingWindow } from './EditingWindow';
 import { Processing } from './Processing';
-import { editingModeState, editorOptionsState, imageDataState, isEditState, processingState, readyState, } from './Store';
+import { AspectRatioState, editingModeState, editorOptionsState, imageDataState, isEditState, processingState, readyState, } from './Store';
 function ImageEditorCore(props) {
-    const { minimumCropDimensions = { width: 100, height: 100 }, fixedAspectRatio = 0.66666666666, onEditingCancel, onEditingComplete, imageUri = null, processingComponent, editorOptions, } = props;
+    const aspect = useRecoilValue(AspectRatioState);
+   
+    const { minimumCropDimensions = { width: 100, height: 100 }, fixedAspectRatio = aspect, onEditingCancel, onEditingComplete, imageUri = null, processingComponent, editorOptions, } = props;
     const [options, setOptions] = useRecoilState(editorOptionsState);
     const [imageData, setImageData] = useRecoilState(imageDataState);
     const [, setReady] = useRecoilState(readyState);
     const [, setEditingMode] = useRecoilState(editingModeState);
     const [, setProcessing] = useRecoilState(processingState);
     const [isEdit] = useRecoilState(isEditState);
+  
     const initialize = useCallback(async () => {
         setProcessing(true);
         if (imageUri) {
